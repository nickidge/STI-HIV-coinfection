# source("sety0.R", echo = F)
# y0 = sety0()
# run model and calibrate
source("model.R", echo = F)
source("processing.R", echo=F)
uncal = run_model(y0_base, tvec_base)
source("calibrate.R", echo = T)
warnings()
tvec_base = seq(2000, 2030, by=1/12)
tvec = tvec_base
nt = length(tvec)
source("init.R", echo = F)
source("loadpars.R", echo = F)
source("loadbase.R", echo = F)
source("info.R", echo = F)
source("default_values.R", echo = F)
source("y0.R", echo = F)
source("themes.R", echo = F)
# set key dates
start_year = 2000
last_data_year = as.numeric(tail(data_raw[,1], 1))
end_year = 2030
# # load the base scenario and set initial conditions
# source("loadbase.R", echo = F)
# source("sety0.R", echo = F)
# y0 = sety0()
# run model and calibrate
source("model.R", echo = F)
source("processing.R", echo=F)
uncal = run_model(y0_base, tvec_base)
source("calibrate.R", echo = T)
tvec_base = seq(2000, 2030, by=1/12)
tvec = tvec_base
nt = length(tvec)
source("init.R", echo = F)
source("loadpars.R", echo = F)
source("loadbase.R", echo = F)
source("info.R", echo = F)
source("default_values.R", echo = F)
source("y0.R", echo = F)
source("themes.R", echo = F)
# set key dates
start_year = 2000
last_data_year = as.numeric(tail(data_raw[,1], 1))
end_year = 2030
# # load the base scenario and set initial conditions
# source("loadbase.R", echo = F)
# source("sety0.R", echo = F)
# y0 = sety0()
# run model and calibrate
source("model.R", echo = F)
source("processing.R", echo=F)
uncal = run_model(y0_base, tvec_base)
source("calibrate.R", echo = T)
tvec_base = seq(2000, 2030, by=1/12)
tvec = tvec_base
nt = length(tvec)
source("init.R", echo = F)
source("loadpars.R", echo = F)
source("loadbase.R", echo = F)
source("info.R", echo = F)
source("default_values.R", echo = F)
source("y0.R", echo = F)
source("themes.R", echo = F)
# set key dates
start_year = 2000
last_data_year = as.numeric(tail(data_raw[,1], 1))
end_year = 2030
# # load the base scenario and set initial conditions
# source("loadbase.R", echo = F)
# source("sety0.R", echo = F)
# y0 = sety0()
# run model and calibrate
source("model.R", echo = F)
source("processing.R", echo=F)
uncal = run_model(y0_base, tvec_base)
source("calibrate.R", echo = T)
debugSource('~/GitHub/STI-HIV-coinfection/processing.R', echo=TRUE)
res = extr(cal, c('HIV_diag', 'PLHIV'))
HIV_diag_log = output$care_cascade_log
source('~/GitHub/STI-HIV-coinfection/model.R', echo=TRUE)
cal = run_model(y0_base, optvars=list('f_infect_HIV' = f_infect_HIV_optim,
'init_PLHIV' = init_PLHIV_optim))
res = extr(cal, c('HIV_diag', 'PLHIV'))
debugSource('~/GitHub/STI-HIV-coinfection/processing.R', echo=TRUE)
res = extr(cal, c('HIV_diag', 'PLHIV'))
debugSource('~/GitHub/STI-HIV-coinfection/processing.R', echo=TRUE)
res = extr(cal, c('HIV_diag', 'PLHIV'))
debugSource('~/GitHub/STI-HIV-coinfection/processing.R', echo=TRUE)
res = extr(cal, c('HIV_diag', 'PLHIV'))
care_cascade_trans_log
HIV_trans_log
debugSource('~/GitHub/STI-HIV-coinfection/model.R', echo=TRUE)
Q
debugSource('~/GitHub/STI-HIV-coinfection/model.R', echo=TRUE)
cal = run_model(y0_base, optvars=list('f_infect_HIV' = f_infect_HIV_optim,
'init_PLHIV' = init_PLHIV_optim))
HIV_trans
HIV_p
HIV_trans
tHIV$test
HIV_trans
HIV_trans[tHIV$test,,]
rowSums(HIV_trans[tHIV$test,,])
apply(HIV_trans[tHIV$test,,], 1, sum)
apply(HIV_trans[tHIV$test,,], c(2,3), sum)
prevdt["D1",,]
source('~/GitHub/STI-HIV-coinfection/model.R', echo=TRUE)
cal = run_model(y0_base, optvars=list('f_infect_HIV' = f_infect_HIV_optim,
'init_PLHIV' = init_PLHIV_optim))
debugSource('~/GitHub/STI-HIV-coinfection/model.R', echo=TRUE)
cal = run_model(y0_base, optvars=list('f_infect_HIV' = f_infect_HIV_optim,
'init_PLHIV' = init_PLHIV_optim))
d1
d2
d3
prop1_to_2
prop2_to_3
source('~/GitHub/STI-HIV-coinfection/model.R', echo=TRUE)
cal = run_model(y0_base, optvars=list('f_infect_HIV' = f_infect_HIV_optim,
'init_PLHIV' = init_PLHIV_optim))
debugSource('~/GitHub/STI-HIV-coinfection/model.R', echo=TRUE)
cal = run_model(y0_base, optvars=list('f_infect_HIV' = f_infect_HIV_optim,
'init_PLHIV' = init_PLHIV_optim))
num1_to_2
str(HIV_trans)
i1
tvec_base = seq(2000, 2030, by=1/12)
tvec = tvec_base
nt = length(tvec)
source("init.R", echo = F)
source("loadpars.R", echo = F)
source("loadbase.R", echo = F)
source("info.R", echo = F)
source("default_values.R", echo = F)
source("y0.R", echo = F)
source("themes.R", echo = F)
# set key dates
start_year = 2000
last_data_year = as.numeric(tail(data_raw[,1], 1))
end_year = 2030
# # load the base scenario and set initial conditions
# source("loadbase.R", echo = F)
# source("sety0.R", echo = F)
# y0 = sety0()
# run model and calibrate
source("model.R", echo = F)
source("processing.R", echo=F)
uncal = run_model(y0_base, tvec_base)
uncal
tvec_base = seq(2000, 2030, by=1/12)
tvec = tvec_base
nt = length(tvec)
source("init.R", echo = F)
source("loadpars.R", echo = F)
source("loadbase.R", echo = F)
source("info.R", echo = F)
source("default_values.R", echo = F)
source("y0.R", echo = F)
source("themes.R", echo = F)
# set key dates
start_year = 2000
last_data_year = as.numeric(tail(data_raw[,1], 1))
end_year = 2030
# # load the base scenario and set initial conditions
# source("loadbase.R", echo = F)
# source("sety0.R", echo = F)
# y0 = sety0()
# run model and calibrate
source("model.R", echo = F)
source("processing.R", echo=F)
uncal = run_model(y0_base, tvec_base)
source("calibrate.R", echo = T)
source('~/GitHub/STI-HIV-coinfection/calibrate.R', echo=TRUE)
debugSource('~/GitHub/STI-HIV-coinfection/processing.R', echo=TRUE)
source('~/GitHub/STI-HIV-coinfection/processing.R', echo=TRUE)
source('~/GitHub/STI-HIV-coinfection/calibrate.R', echo=TRUE)
debugSource('~/GitHub/STI-HIV-coinfection/processing.R', echo=TRUE)
source('~/GitHub/STI-HIV-coinfection/calibrate.R', echo=TRUE)
HIV_trans_log
tHIV$test
source('~/GitHub/STI-HIV-coinfection/main.R', echo=TRUE)
tvec_base = seq(2000, 2030, by=1/12)
tvec = tvec_base
nt = length(tvec)
source("init.R", echo = F)
source("loadpars.R", echo = F)
source("loadbase.R", echo = F)
source("info.R", echo = F)
source("default_values.R", echo = F)
source("y0.R", echo = F)
source("themes.R", echo = F)
# set key dates
start_year = 2000
last_data_year = as.numeric(tail(data_raw[,1], 1))
end_year = 2030
# # load the base scenario and set initial conditions
# source("loadbase.R", echo = F)
# source("sety0.R", echo = F)
# y0 = sety0()
# run model and calibrate
source("model.R", echo = F)
source("processing.R", echo=F)
uncal = run_model(y0_base, tvec_base)
source("calibrate.R", echo = T)
cascade0
cascade0$`Prop HIV diagnosed`[1]
init_diag_base = cascade0$`Prop HIV diagnosed`[1]
init_diag_base
source('~/GitHub/STI-HIV-coinfection/main.R', echo=TRUE)
source('~/GitHub/STI-HIV-coinfection/main.R', echo=TRUE)
p
?spread
init_diag_base
source('~/GitHub/STI-HIV-coinfection/main.R', echo=TRUE)
popsize_interp_base
growth
totalpop0
popsize_t = totalpop0$Year
popsize_y = totalpop0$`Total MSM`
lm(log(popsize_y) ~ log(popsize_t))
?nls
popsize_start = list(alpha = 1, beta = 1, theta = 0)
popsize_output = nls(y ~ alpha * exp(beta * x) + theta, data=data.frame(x=popsize_t, y=popsize_y), start=popsize_start)
data.frame(x=popsize_t, y=popsize_y)
popsize_start = list(alpha = 1, beta = 1, theta = 0)
popsize_output = nls(y ~ alpha * exp(beta * x) + theta, data=data.frame(x=popsize_t, y=popsize_y), start=popsize_start)
popsize_output = nls(y ~ alpha * exp(beta * x) + theta, data=data.frame(x=popsize_t, y=popsize_y), start=popsize_start)
popsize_start = list(alpha = 1, beta = 1, theta = 0.5)
popsize_output = nls(y ~ alpha * exp(beta * x) + theta, data=data.frame(x=popsize_t, y=popsize_y), start=popsize_start)
start
popsize_start
popsize_start = list(alpha = 1, beta = 1, theta = 0.5)
popsize_start
popsize_model = lm(log(y - 1) ~ x, data=data.df)
popsize_data = data.frame(popsize_t = totalpop0$Year,
popsize_y = totalpop0$`Total MSM`)
popsize_model = lm(log(y - 1) ~ x, data=popsize_data)
popsize_data = data.frame(popsize_t = totalpop0$Year,
popsize_y = totalpop0$`Total MSM`)
popsize_data = data.frame(popsize_t = totalpop0$Year,
popsize_y = totalpop0$`Total MSM`)
popsize_model = lm(log(y - 1) ~ x, data=popsize_data)
popsize_data = data.frame(x = totalpop0$Year,
y = totalpop0$`Total MSM`)
popsize_model = lm(log(y - 1) ~ x, data=popsize_data)
popsize_start = list(alpha = exp(coef(popsize_model)[1]), beta = coef(popsize_model)[2], theta = 1)
popsize_output = nls(y ~ alpha * exp(beta * x) + theta, data=popsize_data, start=popsize_start)
popsize_model
popsize_start
popsize_data = data.frame(x = totalpop0$Year,
y = totalpop0$`Total MSM`)
popsize_model = lm(log(y - popsize_data$y[0]) ~ x, data=popsize_data)
popsize_start = list(alpha = exp(coef(popsize_model)[1]), beta = coef(popsize_model)[2], theta = 1)
popsize_data$y[0]
popsize_data$y
popsize_data = data.frame(x = totalpop0$Year,
y = totalpop0$`Total MSM`)
popsize_model = lm(log(y - popsize_data$y[1]) ~ x, data=popsize_data)
popsize_data$y[1]
popsize_model = lm(log(y - popsize_data$y[1]) ~ x, data=popsize_data)
popsize_data
popsize_model = lm(log(y - popsize_data$y[1] - 1) ~ x, data=popsize_data)
popsize_model = lm(log(y - popsize_data$y[1] + 1) ~ x, data=popsize_data)
popsize_start = list(alpha = exp(coef(popsize_model)[1]), beta = coef(popsize_model)[2], theta = 1)
popsize_output = nls(y ~ alpha * exp(beta * x) + theta, data=popsize_data, start=popsize_start)
popsize_start
popsize_model
?I
popsize_output = nls(y ~ I(a*exp(-b*x) + c), data=popsize_data, start=list(a=max(popsize_data$y), b=1, c=10), trace=T)
popsize_output = nls(y ~ I(a*exp(b*x) + c), data=popsize_data, start=list(a=max(popsize_data$y), b=1, c=10), trace=T)
y ~ I(a*exp(b*x) + c)
list(a=max(popsize_data$y), b=1, c=10)
popsize_output = nls(y ~ I(a*exp(b*x) + c), data=popsize_data, start=list(a=max(popsize_data$y), b=1, c=popsize_data$y[1]), trace=T)
popsize_output = nls(y ~ I(a*exp(b*(x - 2000)) + c), data=popsize_data, start=list(a=max(popsize_data$y), b=1, c=popsize_data$y[1]), trace=T)
popsize_output = nls(y ~ I(a*exp(b*(x - 2000)) + c), data=popsize_data, start=list(a=max(popsize_data$y), b=1, c=popsize_data$y[1]), trace=T)
popsize_data
list(a=max(popsize_data$y), b=1, c=popsize_data$y[1])
growth
popsize_output = nls(y ~ I(a*exp(b*(x - 2000)) + c), data=popsize_data, start=list(a=1, b=1+growth, c=popsize_data$y[1]), trace=T)
list(a=1, b=1+growth, c=popsize_data$y[1])
popsize_output = nls(y ~ I(a*exp(b*x)), data=popsize_data, start=list(a=1, b=1+growth), trace=T)
popsize_output = nls(y ~ I(a*exp(b*x)), data=popsize_data, start=list(a=exp(coef(popsize_model)[1], b=1+growth), trace=T)
popsize_output = nls(y ~ I(a*exp(b*x)), data=popsize_data, start=list(a=coef(popsize_model)[1], b=1+growth), trace=T)
popsize_output = nls(y ~ I(a*exp(b*x)), data=popsize_data, start=list(a=coef(popsize_model)[1], b=1+growth), trace=T)
popsize_output = nls(y ~ exp(a + b*x), data=popsize_data, start=list(a=0, b=1+growth), trace=T)
popsize_output = nls(y ~ exp(a + b*x), data=popsize_data, start=list(a=0, b=1+growth))
popsize_data
popsize_output = nls(y ~ a * exp(b*(x-2000)) , data=popsize_data, start=list(a=0, b=1+growth))
popsize_output = nls(y ~ a * exp(b*(x-2000)) , data=popsize_data, start=list(a=1, b=1+growth))
popsize_output = nls(y ~ a * exp(b*(x-2000)) , data=popsize_data, start=list(a=2000, b=1+growth))
popsize_output = nls(y ~ a * exp(b*(x-2000)) , data=popsize_data, start=list(a=2000, b=1))
popsize_output = nlsLM(y ~ a * exp(b*(x-2000)) , data=popsize_data, start=list(a=2000, b=1))
install.packages("minpack.lm")
library(minpack.lm)
popsize_output = nlsLM(y ~ a * exp(b*(x-2000)) , data=popsize_data, start=list(a=2000, b=1))
popsize_output
popsize_data = data.frame(x = totalpop0$Year,
y = totalpop0$`Total MSM`)
popsize_output = nlsLM(y ~ a * exp(b*(x-2000)) , data=popsize_data, start=list(a=2000, b=1))
popsize_output
popsize_output = nlsLM(y ~ a * exp(b*(x)) , data=popsize_data, start=list(a=2000, b=1))
popsize_output = nlsLM(y ~ a * exp(b*x , data=popsize_data, start=list(a=2000, b=1))
popsize_output = nlsLM(y ~ a * exp(b*x) , data=popsize_data, start=list(a=2000, b=1))
popsize_data = data.frame(x = totalpop0$Year,
y = totalpop0$`Total MSM`)
popsize_output = nlsLM(y ~ a * exp(b*x) , data=popsize_data, start=list(a=2000, b=1))
popsize_data = data.frame(x = totalpop0$Year,
y = totalpop0$`Total MSM`)
popsize_output = nlsLM(y ~ a * exp(b*(x-2000)) , data=popsize_data, start=list(a=2000, b=1))
popsize_output$m
popsize_output$data
popsize_output$convInfo
popsize_output
popsize_output$a
popsize_output
?nlsLM
fitted(popsize_output)
popsize_output(c(1,2,3))
popsize_output
popsize_output$call
popsize_output$call(5)
popsize_output$data
popsize_output$control
predict(popsize_output, newdata = tvec_base)
tvec_base
predict(popsize_output, newdata = tvec_base)
popsize_output
predict(popsize_output, newdata = tvec_base)
tvec_base
str(tvec_base)
?predict
predict.nls(popsize_output, newdata = tvec_base)
library(stats)
predict.nls(popsize_output, newdata = tvec_base)
predict.nls(popsize_output, newdata = data.frame(t = tvec_base))
predict(popsize_output, newdata = data.frame(t = tvec_base))
popsize_data
growth
(1 + growth)^12
tvec_base
totalpop0
tvec_base
popsize_t_init = lapply(tvec_base, 1, function(x) totalpop0$`Total MSM`^( 12 * (x - totalpop0$Year[1])))
?lapply
?vapply
popsize_t_init = apply(tvec_base, 1, function(x) totalpop0$`Total MSM`^( 12 * (x - totalpop0$Year[1])))
popsize_t_init = lapply(tvec_base, function(x) totalpop0$`Total MSM`^( 12 * (x - totalpop0$Year[1])))
popsize_t_init
popsize_t_init = lapply(tvec_base, function(x) totalpop0$`Total MSM` * growth^( 12 * (x - totalpop0$Year[1])))
popsize_t_init
popsize_t_init = lapply(tvec_base, function(x) totalpop0$`Total MSM` * (1 + growth)^( 12 * (x - totalpop0$Year[1])))
popsize_t_init
popsize_t_init = lapply(tvec_base, function(x) totalpop0$`Total MSM`[1] * (1 + growth)^( 12 * (x - totalpop0$Year[1])))
popsize_t_init
unlist(popsize_t_init)
popsize_interp_base = lapply(tvec_base, function(x) totalpop0$`Total MSM`[1] * (1 + growth)^( 12 * (x - totalpop0$Year[1])))
popsize_interp_base = setNames(unlist(popsize_interp_base), tvec_base)
popsize_interp_base
popsize_interp_base = setNames(unlist(lapply(tvec_base, function(x) totalpop0$`Total MSM`[1] * (1 + growth)^( 12 * (x - totalpop0$Year[1])))), tvec_base)
tvec_base = seq(2000, 2030, by=1/12)
tvec = tvec_base
nt = length(tvec)
source("init.R", echo = F)
source("loadpars.R", echo = F)
source("loadbase.R", echo = F)
source("info.R", echo = F)
source("default_values.R", echo = F)
source("y0.R", echo = F)
source("themes.R", echo = F)
# set key dates
start_year = 2000
last_data_year = as.numeric(tail(data_raw[,1], 1))
end_year = 2030
# # load the base scenario and set initial conditions
# source("loadbase.R", echo = F)
# source("sety0.R", echo = F)
# y0 = sety0()
# run model and calibrate
source("model.R", echo = F)
source("processing.R", echo=F)
uncal = run_model(y0_base, tvec_base)
source("calibrate.R", echo = T)
source('~/GitHub/STI-HIV-coinfection/main.R', echo=TRUE)
debugSource('~/GitHub/STI-HIV-coinfection/model.R', echo=TRUE)
source('~/GitHub/STI-HIV-coinfection/main.R', echo=TRUE)
source('~/GitHub/STI-HIV-coinfection/main.R', echo=TRUE)
debugSource('~/GitHub/STI-HIV-coinfection/model.R', echo=TRUE)
uncal = run_model(y0_base, tvec_base)
popsize_interp
for(key in optvarkeys){
if(grepl('_interp', key)){
# assign(paste0(key, '_this'), asub(get(key), TT, 1))
assign(gsub('.{7}$', '', key), asub(get(key), TT, 1))
}
}
source('~/GitHub/STI-HIV-coinfection/main.R', echo=TRUE)
source('~/GitHub/STI-HIV-coinfection/main.R', echo=TRUE)
?expand_scale
source('~/GitHub/STI-HIV-coinfection/main.R', echo=TRUE)
init_diag_base
init_diag_base
source('~/GitHub/STI-HIV-coinfection/main.R', echo=TRUE)
source('~/GitHub/STI-HIV-coinfection/main.R', echo=TRUE)
source('~/GitHub/STI-HIV-coinfection/main.R', echo=TRUE)
source('~/GitHub/STI-HIV-coinfection/main.R', echo=TRUE)
source('~/GitHub/STI-HIV-coinfection/main.R', echo=TRUE)
source('~/GitHub/STI-HIV-coinfection/main.R', echo=TRUE)
source('~/GitHub/STI-HIV-coinfection/main.R', echo=TRUE)
source('~/GitHub/STI-HIV-coinfection/main.R', echo=TRUE)
source('~/GitHub/STI-HIV-coinfection/main.R', echo=TRUE)
source('~/GitHub/STI-HIV-coinfection/main.R', echo=TRUE)
source('~/GitHub/STI-HIV-coinfection/main.R', echo=TRUE)
f_infect_HIV_optim
source('~/GitHub/STI-HIV-coinfection/main.R', echo=TRUE)
?ave
?mean
source('~/GitHub/STI-HIV-coinfection/main.R', echo=TRUE)
t_testing_interp_base
test_wait_interp_base
condom_by_HIV_interp_base
t_testing
t_testing_interp
t_testing_interp_base
tHIV$wait_3
source('~/GitHub/STI-HIV-coinfection/main.R', echo=TRUE)
t_testing0
t_testing0
base_raw[,c(1,13:18)]
source('~/GitHub/STI-HIV-coinfection/main.R', echo=TRUE)
test_wait_interp_base
f_infect_HIV_optim
init_PLHIV_optim
source('~/GitHub/STI-HIV-coinfection/main.R', echo=TRUE)
init_diag_base
source('~/GitHub/STI-HIV-coinfection/main.R', echo=TRUE)
source('~/GitHub/STI-HIV-coinfection/main.R', echo=TRUE)
View(data_raw)
source('~/GitHub/STI-HIV-coinfection/main.R', echo=TRUE)
init_diag_prop_optim = optim_pars[3]
cal = run_model(y0_base, optvars=list('f_infect_HIV' = f_infect_HIV_optim,
'init_diag_prop' = init_diag_prop_optim,
'init_PLHIV' = init_PLHIV_optim))
res = extr(cal, output_keys)
p = plot_calibration(cal, all_dat)
p
eff_condom
timepars_raw = read_excel("data_sti.xlsx", sheet="timepars")
timepars_raw
ncol(timepars_raw)
t_dat = timepars_raw[3:,1]
?read_excel
timepars_raw = read_excel("data_sti.xlsx", sheet="timepars", col_names = F)
timepars_col = ncol(timepars_raw)
timepars_row = nrow(timepars_raw)
t_dat = timepars_raw[4:timepars_row,1]
t_dat
t_dat = as.numeric(t_dat)
t_dat
t_dat = as.numeric(unlist(t_dat))
t_dat
timepars_col
col = 2
par = timepars_raw[1,col]
pop = timepars_raw[2,col]
subpop = timepars_raw[3,col]
col
par
timepars_raw
timepars_raw = as.data.frame(timepars_raw)
timepars_raw
str(timepars_raw)
y = as.numeric(timepars_raw[4:timepars_row, col])
y
source('~/GitHub/STI-HIV-coinfection/main.R', echo=TRUE)
popsize_interp_base
y = as.numeric(timepars_raw[4:timepars_row, col])
source('~/GitHub/STI-HIV-coinfection/loadtimepars.R', echo=TRUE)
col = 2
par = timepars_raw[1,col]
pop = timepars_raw[2,col]
subpop = timepars_raw[3,col]
y = as.numeric(timepars_raw[4:timepars_row, col])
notna_index = !is.na(y)
notna_index = !is.na(y)
notna_index
thist = t_dat[notna_index]
thisy = y[notna_index]
y = as.numeric(timepars_raw[4:timepars_row, col])
notna_index = !is.na(y)
if(sum(notna_index) == 0){next}
thist
sum(is.na(NULL))
?approxfun
pop
match(pop, c("HIV_low_risk", "HIV_high_risk", "HIV_prep"))
match("HIV_high_risk", c("HIV_low_risk", "HIV_high_risk", "HIV_prep"))
col = 3*match(pop, c("HIV_low_risk", "HIV_high_risk", "HIV_prep")) + match(subpop, c("new_infection", "mid_infection", "old_infection"))
col
col = -1 + 3*match(pop, c("HIV_low_risk", "HIV_high_risk", "HIV_prep")) + match(subpop, c("new_infection", "mid_infection", "old_infection"))
col = -3 + 3*match(pop, c("HIV_low_risk", "HIV_high_risk", "HIV_prep")) + match(subpop, c("new_infection", "mid_infection", "old_infection"))
col
col = -1 + match(subpop, c("new_to_mid", "mid_to_old"))
col
source('~/GitHub/STI-HIV-coinfection/main.R', echo=TRUE)
popgrowth
debugSource('~/GitHub/STI-HIV-coinfection/model.R', echo=TRUE)
uncal = run_model(y0_base, tvec_base)
popsize
prevdt
source('~/GitHub/STI-HIV-coinfection/main.R', echo=TRUE)
source('~/GitHub/STI-HIV-coinfection/main.R', echo=TRUE)
