foi_HIV = fixnan(foi_HIV)
# # pr_infect_sti[1] =  f_infect_sti[1] * ((1-mix1) * sum(prevdt[8,3:4,3]) / prevdt[8,"pop_sti",3] + # HIV-
# #                                            mix1 * sum(prevdt[9,3:4,3]) / prevdt[9,"pop_sti",3]) # HIV+
# # pr_infect_sti[2] =  f_infect_sti[1] * ((1-mix2) * sum(prevdt[8,3:4,3]) / prevdt[8,"pop_sti",3] + # HIV-
# #                                            mix2 * sum(prevdt[9,3:4,3]) / prevdt[9,"pop_sti",3]) # HIV+
# # pr_infect_sti[3] =  f_infect_sti[2] * (mix3 * sum(prevdt[8,3:4,3]) / prevdt[8,"pop_sti",3] + # HIV-
# #                                            (1-mix3) * sum(prevdt[9,3:4,3]) / prevdt[9,"pop_sti",3]) # HIV+
#
# pr_infect_sti = pr_infect_sti * cond_sti
#
# pr_infect_log[t,] = pr_infect_sti
#
#
# # temp = prevdt[,,]
#
# pop_growth = SID[1,"pop_HIV", "pop_sti",3] * (1+growth)^(t)
###### TRANSITIONS ######
# HIV #
HIV_p = setNames(numeric(nrow(HIV_transitions)), HIV_transitions[,'trans'])
# infections
HIV_p[tHIV$inf] = apply(prevdt[sHIV$S,,], MARGIN=1, FUN=sum) * foi_HIV
# waiting undiagnosed
HIV_p[tHIV$wait_1] = 1/test_wait[1]
HIV_p[tHIV$wait_2] = 1/test_wait[2]
# diagnoses
HIV_p["I_lo_new_d"] = 1/t_testing[1]
HIV_p["I_lo_mid_d"] = 1/t_testing[2]
HIV_p["I_lo_old_d"] = 1/t_testing[3]
HIV_p["I_hi_new_d"] = 1/t_testing[4]
HIV_p["I_hi_mid_d"] = 1/t_testing[5]
HIV_p["I_hi_old_d"] = 1/t_testing[6]
# initialise temp
if(t==1){
prevdt = y0
} else {
prevdt = SID[t-1,,,]
}
#
#       temp = array(0, dim = c(13,11,3),
#                    dimnames = list(c("S1", "S2", "I", "D", "D1", "D2", "D3", "HIV_minus", "HIV_plus", "incidence_HIV", "diagnoses_HIV", "deaths_HIV", "pop_HIV"),
#                                    c("S_sti", "E_sti", "Sy_sti", "ASy_sti", "T_sti", "sti_minus", "sti_plus", "incidence_sti", "diagnoses_sti", "recovered_sti", "pop_sti"),
#                                    c("low_risk", "high_risk", "all")))
#
#       temp = SID_mat
# TT is the time counter - the actual year
TT = as.character(tvec[t])
for(key in optvarkeys){
if(grepl('_interp', key)){
# assign(paste0(key, '_this'), asub(get(key), TT, 1))
assign(gsub('.{7}$', '', key), asub(get(key), TT, 1))
}
}
# prop_condom_strat = rbind(
#   (1-condom_by_HIV_de)*(1-gel_mat_de[1,]),
#   (1-condom_by_HIV_de)*gel_mat_de[1,] + condom_by_HIV_de*gel_mat_de[2,],
#   condom_by_HIV_de*(1-gel_mat_de[2,])
# )
#
# dimnames(prop_condom_strat) = list(c("Nil", "Gel", "Condom"),
#                                               c("HIV- no prep", "HIV- prep", "HIV+"))
#
# if(any(abs(colSums(prop_condom_strat)-1) > 10^-10) | any(prop_condom_strat<0)){
#   print("Condom proportions are not contained!")
# }
# # through_condom_by_type = c(1,(1-eff_gel_de[1]),(1-eff_condom))
# through_condom_by_type = cbind(1, 1-eff_gel_de, 1-eff_condom)
# dimnames(through_condom_by_type) = list(c("HIV", "Gonorrhoea"),
#                                         c("Nil", "Gel", "Condom"))
# # dot_condom = prop_condom_strat * through_condom_by_type
# dot_condom = NULL
# for(i in 1:nrow(through_condom_by_type)){
#   dot_condom = abind(dot_condom, prop_condom_strat * through_condom_by_type[i,], along=3)
# }
# dimnames(dot_condom)[[3]] = c("HIV", "Gonorrhoea")
# mult_condom = colSums(dot_condom)
# mult_condom_means = colSums(prevdt[c(1,2,9),"pop_sti",3] * mult_condom) / prevdt[13,"pop_sti",3]
# cond_HIV = mult_condom_means[1]
# cond_sti = mult_condom[,2]
condom_thru = 1 - condom_by_HIV
#########################
# calculate force of infections
rel_incidence = sum(prevdt[sHIV$I,,]) + sum(treat_eff[1]*prevdt["D1",,]) + sum(treat_eff[2]*prevdt["D2",,]) + sum(treat_eff[3]*prevdt["D3",,])
totalppl = sum(prevdt)
foi_HIV = risk_mat * condom_thru * f_infect_HIV * rel_incidence / totalppl
foi_HIV = fixnan(foi_HIV)
# # pr_infect_sti[1] =  f_infect_sti[1] * ((1-mix1) * sum(prevdt[8,3:4,3]) / prevdt[8,"pop_sti",3] + # HIV-
# #                                            mix1 * sum(prevdt[9,3:4,3]) / prevdt[9,"pop_sti",3]) # HIV+
# # pr_infect_sti[2] =  f_infect_sti[1] * ((1-mix2) * sum(prevdt[8,3:4,3]) / prevdt[8,"pop_sti",3] + # HIV-
# #                                            mix2 * sum(prevdt[9,3:4,3]) / prevdt[9,"pop_sti",3]) # HIV+
# # pr_infect_sti[3] =  f_infect_sti[2] * (mix3 * sum(prevdt[8,3:4,3]) / prevdt[8,"pop_sti",3] + # HIV-
# #                                            (1-mix3) * sum(prevdt[9,3:4,3]) / prevdt[9,"pop_sti",3]) # HIV+
#
# pr_infect_sti = pr_infect_sti * cond_sti
#
# pr_infect_log[t,] = pr_infect_sti
#
#
# # temp = prevdt[,,]
#
# pop_growth = SID[1,"pop_HIV", "pop_sti",3] * (1+growth)^(t)
###### TRANSITIONS ######
# HIV #
HIV_p = setNames(numeric(nrow(HIV_transitions)), HIV_transitions[,'trans'])
# infections
HIV_p[tHIV$inf] = apply(prevdt[sHIV$S,,], MARGIN=1, FUN=sum) * foi_HIV
# waiting undiagnosed
HIV_p[tHIV$wait_1] = 1/test_wait[1]
HIV_p[tHIV$wait_2] = 1/test_wait[2]
# diagnoses
HIV_p["I_lo_new_d"] = 1/t_testing[1]
HIV_p["I_lo_mid_d"] = 1/t_testing[2]
HIV_p["I_lo_old_d"] = 1/t_testing[3]
HIV_p["I_hi_new_d"] = 1/t_testing[4]
HIV_p["I_hi_mid_d"] = 1/t_testing[5]
HIV_p["I_hi_old_d"] = 1/t_testing[6]
HIV_p
prevdt[sHIV$S,,]
foi_HIV
apply(prevdt[sHIV$S,,], MARGIN=1, FUN=sum)
foi_HIV
totalppl
rel_incidence
risk_mat
source('~/GitHub/STI-HIV-coinfection/model.R', echo=TRUE)
run_model(0)
f_infect_HIV
source('~/GitHub/STI-HIV-coinfection/model.R', echo=TRUE)
run_model(0)
source('~/GitHub/STI-HIV-coinfection/model.R', echo=TRUE)
run_model(0)
source('~/GitHub/STI-HIV-coinfection/model.R', echo=TRUE)
run_model(0)
source('~/GitHub/STI-HIV-coinfection/model.R', echo=TRUE)
run_model(0)
source('~/GitHub/STI-HIV-coinfection/model.R', echo=TRUE)
run_model(0)
source('~/GitHub/STI-HIV-coinfection/model.R', echo=TRUE)
run_model(0)
HIV_transitions
HIV_trans
HIV_trans
HIV_trans
HIV_transitions
?array
?lapply
dimnames = list(head(tvec, -1),
#                             c("S1", "S2", "I", "D", "D1", "D2", "D3", "HIV_minus", "HIV_plus", "incidence_HIV", "diagnoses_HIV", "deaths_HIV", "pop_HIV"),
#                             c("S_sti", "E_sti", "Sy_sti", "ASy_sti", "T_sti", "sti_minus", "sti_plus", "incidence_sti", "diagnoses_sti", "recovered_sti", "pop_sti"),
#                             c("low_risk", "high_risk", "all"))
)
dimnames = list(
c("S1", "S2", "I", "D", "D1", "D2", "D3", "HIV_minus", "HIV_plus", "incidence_HIV", "diagnoses_HIV", "deaths_HIV", "pop_HIV"),
c("S_sti", "E_sti", "Sy_sti", "ASy_sti", "T_sti", "sti_minus", "sti_plus", "incidence_sti", "diagnoses_sti", "recovered_sti", "pop_sti"),
c("low_risk", "high_risk", "all"))
dimnames
lengths(dimnames)
makearray = function(dimnames){
return(array(0, dim=lengths(dimnames), dimnames=dimnames))
}
HIV_transitions
HIV_transitions[,"trans"]
HIV_trans_log = makearray(list(tvec, HIV_transitions[,"trans"], STI_labs, RISK_labs))
HIV_trans_log
source('~/GitHub/STI-HIV-coinfection/model.R', echo=TRUE)
run_model
run_model(0)
num1_to_2
source('~/GitHub/STI-HIV-coinfection/model.R', echo=TRUE)
ttt = runmodel(0)
ttt = run_model(0)
ttt[[2]]
mu
0.001 * 12
1/0.012
deaths
popgrowth_log = setNames(numeric(tvec), tvec)
popgrowth_log = setNames(numeric(length(tvec)), tvec)
popgrowth_log
deaths_log = makearray(list(tvec, HIV_labs, STI_labs, RISK_labs))
source('~/GitHub/STI-HIV-coinfection/model.R', echo=TRUE)
source('~/GitHub/STI-HIV-coinfection/model.R', echo=TRUE)
run_model(0)
source('~/GitHub/STI-HIV-coinfection/model.R', echo=TRUE)
ttt = run_model(0)
debugSource('~/GitHub/STI-HIV-coinfection/model.R', echo=TRUE)
ttt = run_model(0)
prop2_to_3
prop1_to_2
prop1_to_2 < 0 | prop1_to_2 > 1
source('~/GitHub/STI-HIV-coinfection/model.R', echo=TRUE)
ttt = run_model(0)
debugSource('~/GitHub/STI-HIV-coinfection/model.R', echo=TRUE)
ttt = run_model(0)
prop2_to_3
debugSource('~/GitHub/STI-HIV-coinfection/model.R', echo=TRUE)
debugSource('~/GitHub/STI-HIV-coinfection/model.R', echo=TRUE)
debugSource('~/GitHub/STI-HIV-coinfection/model.R', echo=TRUE)
debugSource('~/GitHub/STI-HIV-coinfection/model.R', echo=TRUE)
ttt = run_model(0)
debugSource('~/GitHub/STI-HIV-coinfection/model.R', echo=TRUE)
ttt = run_model(0)
prop2_to_3
care_cas
d3
d2
d3/d2+
d3
d3/d2plus
d2plus
d3
d3/d2plus
prop2_to_3
debugSource('~/GitHub/STI-HIV-coinfection/model.R', echo=TRUE)
debugSource('~/GitHub/STI-HIV-coinfection/model.R', echo=TRUE)
ttt = run_model(0)
Q
source('~/GitHub/STI-HIV-coinfection/model.R', echo=TRUE)
ttt = run_model(0)
source('~/GitHub/STI-HIV-coinfection/model.R', echo=TRUE)
ttt = run_model(0)
source('~/GitHub/STI-HIV-coinfection/model.R', echo=TRUE)
ttt = run_model(0)
PLHIV0
start_year
# set initial variables as required
s=1
intervention=0
sensitivity=0
sensitivity_supp=0
is_gel=F
int=0
f_infect_base = c(0,0)
iss2=FALSE
# load parameters
source("loadpars.R", echo = F)
# set key dates
start_year = as.numeric(data_raw[1,1])
last_data_year = as.numeric(tail(data_raw[,1], 1))
end_year = 2030
start_year
source('~/GitHub/STI-HIV-coinfection/main.R', echo=TRUE)
# set initial variables as required
s=1
intervention=0
sensitivity=0
sensitivity_supp=0
is_gel=F
int=0
f_infect_base = c(0,0)
iss2=FALSE
# load parameters
source("loadpars.R", echo = F)
# set key dates
start_year = 2000
last_data_year = as.numeric(tail(data_raw[,1], 1))
end_year = 2030
# set tvec0
tvec0 = seq(2000, end_year, by=dt)
tvec = tvec0[tvec0>=start_year]
# tvec0_year = seq(2006, 2031, by=1)
tvec0_year = unique(floor(tvec0))
tvec0_year
tvec
source('~/GitHub/STI-HIV-coinfection/main.R', echo=TRUE)
# set initial variables as required
s=1
intervention=0
sensitivity=0
sensitivity_supp=0
is_gel=F
int=0
f_infect_base = c(0,0)
iss2=FALSE
# load parameters
source("loadpars.R", echo = F)
source("default_values.R", echo = F)
# set key dates
start_year = 2000
last_data_year = as.numeric(tail(data_raw[,1], 1))
end_year = 2030
# set initial variables as required
s=1
intervention=0
sensitivity=0
sensitivity_supp=0
is_gel=F
int=0
f_infect_base = c(0,0)
iss2=FALSE
# load parameters
source("loadpars.R", echo = F)
source("default_values.R", echo = F)
# set key dates
start_year = 2000
last_data_year = as.numeric(tail(data_raw[,1], 1))
end_year = 2030
# set initial variables as required
s=1
intervention=0
sensitivity=0
sensitivity_supp=0
is_gel=F
int=0
f_infect_base = c(0,0)
iss2=FALSE
# load parameters
source("loadpars.R", echo = F)
source("default_values.R", echo = F)
# set key dates
start_year = 2000
last_data_year = as.numeric(tail(data_raw[,1], 1))
end_year = 2030
# # load the base scenario and set initial conditions
# source("loadbase.R", echo = F)
# source("sety0.R", echo = F)
# y0 = sety0()
# run model and calibrate
source("model.R", echo = F)
# set initial variables as required
s=1
intervention=0
sensitivity=0
sensitivity_supp=0
is_gel=F
int=0
f_infect_base = c(0,0)
iss2=FALSE
# load parameters
source("loadpars.R", echo = F)
source("default_values.R", echo = F)
# set key dates
start_year = 2000
last_data_year = as.numeric(tail(data_raw[,1], 1))
end_year = 2030
# # load the base scenario and set initial conditions
# source("loadbase.R", echo = F)
# source("sety0.R", echo = F)
# y0 = sety0()
# run model and calibrate
source("model.R", echo = F)
# set initial variables as required
s=1
intervention=0
sensitivity=0
sensitivity_supp=0
is_gel=F
int=0
f_infect_base = c(0,0)
iss2=FALSE
# load parameters
source("loadpars.R", echo = F)
source("default_values.R", echo = F)
source("y0.R", echo = F)
# set key dates
start_year = 2000
last_data_year = as.numeric(tail(data_raw[,1], 1))
end_year = 2030
# # load the base scenario and set initial conditions
# source("loadbase.R", echo = F)
# source("sety0.R", echo = F)
# y0 = sety0()
# run model and calibrate
source("model.R", echo = F)
uncal = run_model(y0_base, tvec_base)
# set initial variables as required
s=1
intervention=0
sensitivity=0
sensitivity_supp=0
is_gel=F
int=0
f_infect_base = c(0,0)
iss2=FALSE
# load parameters
source("loadpars.R", echo = F)
source("info.R", echo = F)
source("default_values.R", echo = F)
source("y0.R", echo = F)
# set key dates
start_year = 2000
last_data_year = as.numeric(tail(data_raw[,1], 1))
end_year = 2030
# # load the base scenario and set initial conditions
# source("loadbase.R", echo = F)
# source("sety0.R", echo = F)
# y0 = sety0()
# run model and calibrate
source("model.R", echo = F)
uncal = run_model(y0_base, tvec_base)
source("init.R", echo = F)
source("loadpars.R", echo = F)
source("info.R", echo = F)
source("default_values.R", echo = F)
source("y0.R", echo = F)
# set key dates
start_year = 2000
last_data_year = as.numeric(tail(data_raw[,1], 1))
end_year = 2030
# # load the base scenario and set initial conditions
# source("loadbase.R", echo = F)
# source("sety0.R", echo = F)
# y0 = sety0()
# run model and calibrate
source("model.R", echo = F)
uncal = run_model(y0_base, tvec_base)
source("init.R", echo = F)
source("loadpars.R", echo = F)
source("info.R", echo = F)
source("default_values.R", echo = F)
source("y0.R", echo = F)
# set key dates
start_year = 2000
last_data_year = as.numeric(tail(data_raw[,1], 1))
end_year = 2030
# # load the base scenario and set initial conditions
# source("loadbase.R", echo = F)
# source("sety0.R", echo = F)
# y0 = sety0()
# run model and calibrate
source("model.R", echo = F)
uncal = run_model(y0_base, tvec_base)
uncal
View(diagnoses_sti0)
View(diagnoses0)
source('~/GitHub/STI-HIV-coinfection/default_values.R', echo=TRUE)
SID = uncal$SID
SID
SHIV[['PLHIV']] = union(sHIV[['I']], sHIV[['D']])
sHIV[['PLHIV']] = union(sHIV[['I']], sHIV[['D']])
sHIV
extr = function(uncal, keys){
keys = unique(keys)
dat = list()
if(!is.null(intersect(c('PLHIV'), keys))){
SID = uncal$SID
}
for(i in 1:length(keys)){
key = keys[i]
if(key == 'PLHIV'){
this = apply(SID[sHIV$PLHIV,,,], 1, sum)
}
dat = c(dat, key=this)
}
}
extr(uncal, 'PLHIV')
debugSource('~/GitHub/STI-HIV-coinfection/calibrate.R', echo=TRUE)
extr(uncal, 'PLHIV')
extr(uncal, 'PLHIV')
str(SID)
debugSource('~/GitHub/STI-HIV-coinfection/calibrate.R', echo=TRUE)
debugSource('~/GitHub/STI-HIV-coinfection/calibrate.R', echo=TRUE)
extr(uncal, 'PLHIV')
debugSource('~/GitHub/STI-HIV-coinfection/calibrate.R', echo=TRUE)
extr(uncal, 'PLHIV')
SID[,,,]
SID[tvec,,,]
tvec_base
debugSource('~/GitHub/STI-HIV-coinfection/calibrate.R', echo=TRUE)
source('~/GitHub/STI-HIV-coinfection/calibrate.R', echo=TRUE)
extr(uncal, 'PLHIV')
ttt = extr(uncal, 'PLHIV')
ttt
debugSource('~/GitHub/STI-HIV-coinfection/calibrate.R', echo=TRUE)
ttt = extr(uncal, 'PLHIV')
this
SID[tvec,sHIV$PLHIV,,]
debugSource('~/GitHub/STI-HIV-coinfection/calibrate.R', echo=TRUE)
ttt = extr(uncal, 'PLHIV')
this
apply(this, 1, sum)
this = apply(this, 1, sum)
source('~/GitHub/STI-HIV-coinfection/calibrate.R', echo=TRUE)
ttt = extr(uncal, 'PLHIV')
?aggregate
debugSource('~/GitHub/STI-HIV-coinfection/calibrate.R', echo=TRUE)
ttt = extr(uncal, 'PLHIV')
aggregate(this, by=floor(names(this)), FUN=ave)
debugSource('~/GitHub/STI-HIV-coinfection/calibrate.R', echo=TRUE)
ttt = extr(uncal, 'PLHIV')
debugSource('~/GitHub/STI-HIV-coinfection/calibrate.R', echo=TRUE)
ttt = extr(uncal, 'PLHIV')
ttt
source('~/GitHub/STI-HIV-coinfection/calibrate.R', echo=TRUE)
ttt
SID = uncal$SID
this = SID[tvec,sHIV$PLHIV,,]
this = apply(this, 1, sum)
tvec
tvec = as.character(tvec)
this = SID[tvec,sHIV$PLHIV,,]
this = apply(this, 1, sum)
that = this
that
split(that, floor(as.numeric(names(that))))
lapply(split(that, floor(as.numeric(names(that)))), function(x) ave(x) / dt)
unlist(lapply(split(that, floor(as.numeric(names(that)))), function(x) ave(x) / dt))
lapply(split(that, floor(as.numeric(names(that)))), function(x) ave(x) / dt)
lapply(split(that, floor(as.numeric(names(that)))), FUN=function(x) ave(x) / dt)
lapply(split(that, floor(as.numeric(names(that)))), FUN=ave)
lapply(split(that, floor(as.numeric(names(that)))), FUN=function(x) ave(x) / dt)
lapply(split(that, floor(as.numeric(names(that)))), FUN=ave)
lapply(split(that, floor(as.numeric(names(that)))), FUN=function(x) ave(x) / dt)
lapply(split(that, floor(as.numeric(names(that)))), FUN=function(x) sum(ave(x) / dt))
lapply(split(that, floor(as.numeric(names(that)))), FUN=function(x) ave(ave(x) / dt))
lapply(split(that, floor(as.numeric(names(that)))), FUN=function(x) (mean(x) / dt))
unlist(lapply(split(that, floor(as.numeric(names(that)))), FUN=function(x) (mean(x) / dt)))
source('~/GitHub/STI-HIV-coinfection/calibrate.R', echo=TRUE)
ttt = extr(uncal, 'PLHIV')
ttt
source('~/GitHub/STI-HIV-coinfection/calibrate.R', echo=TRUE)
ttt
source('~/GitHub/STI-HIV-coinfection/calibrate.R', echo=TRUE)
