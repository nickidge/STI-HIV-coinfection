### Main line of code: run this to run the whole model ###

# On first run, make sure to run the following line of code to install necessary packages
# install.packages(c("plyr", "readxl", "abind", "lambda.tools", "dfoptim", "gplots", "ggplot2", "reshape2",
#                    "directlabels", "ggpubr", "scales", "gridExtra", "lemon", "tables"))

setwd(dirname(rstudioapi::getActiveDocumentContext()$path))

# load packages
library(plyr)
library(base)
library(readxl)
library(abind)
library(lambda.tools)
library(dfoptim)
library(gplots)
library(ggplot2)
library(reshape2)
library(directlabels)
library(ggpubr)
library(scales)
library(gridExtra)
library(lemon)
library(tables)
library(gdata)
library(gtable)
library(grid)

# record start time. This is to record how long the model takes to run
ptm <- proc.time()

# set initial variables as required
s=1
intervention=0
sensitivity=0
heat_scen_q=0
plot_gel_q=0
debug_check=0
int=0
f_infect_base = c(0,0)
cal_q=0

# load parameters
source("loadpars.R", echo = F)

# set key dates
start_year = as.numeric(data_raw[1,1])
last_data_year = as.numeric(tail(data_raw[,1], 1))
end_year = 2033

# set tvec0
# tvec0 = seq(1985, 2031, by=dt)
tvec0 = seq(2006, end_year+1, by=dt)
tvec = tvec0[tvec0>=start_year]
# tvec0_year = seq(2006, 2031, by=1)
tvec0_year = unique(floor(tvec0))

# risk matrix
risk_mat_apply = function(x){
  y_risk_mat = matrix(1, nrow=3, ncol=2)
  y_risk_mat[2,2] = x
  y_risk_mat[3,2] = x
  y_risk_mat[,2] = x
  return(y_risk_mat)
}

risk_mat = risk_mat_apply(gamma)
risk_mat_de = risk_mat

# load the base scenario and set initial conditions
source("loadbase.R", echo = F)
source("sety0.R", echo = F)
y0 = sety0()

# set f_infect_sti to be very small for first run so it is negligible
f_infect_sti = c(0.00000001,0.00000001)
# f_infect_sti = c(0,0)

# run model and calibrate
source("model.R", echo = F)
source("calibrate.R", echo = T)
SID_list = run_model(y0,tvec)

# # create base scenario
# source("reset_pars.R", echo = F)
# SID_base = run_model(y0,tvec)

# page margins
page_width = 210
page_height = 297
indents = 0.5*c((page_height-243),
                (page_width-170),
                (page_height-243),
                (page_width-170))

plot_width = page_width*0.95
plot_height = 140

# define global plot elements (e.g. horizontal gridlines)
theme_all = theme(panel.grid.minor = element_blank(),
                  panel.grid.major.x = element_blank(),
                  panel.grid.major.y = element_line(colour = "grey55",
                                                    size = 0.15,
                                                    linetype = "dashed"),
                  panel.background = element_rect(fill = "grey92",
                                                  colour = NA),
                  panel.border = element_blank(),
                  axis.ticks = element_blank(),
                  legend.key = element_blank(),
                  legend.background = element_rect(colour=NA,
                                                   fill=alpha("grey92", 0.7)))

# create plots
source("plot_prepare.R", echo = F)
source("plot_HIV.R", echo = F)
source("plot_sti.R", echo = F)

# # print calibrated parameters
# print(c(r_diag_HIV, f_infect_HIV, f_infect_sti))
# print(probX_strat)

# split_year is the year at which the different scenarios take effect, hence where the scenario plots diverge (split)
split_year = 2018
tvec_split = tvec0[which(tvec0>=split_year)]

# save the population distribution at the split
SID_split = SID_list[[7]][as.character(split_year),,,]
y0_split = SID_list[[1]][as.character(split_year),,]

# # run debug
# source("debug.R", echo = TRUE)

# create base scenario
source("reset_pars.R", echo = F)
SID_base = run_model(y0,tvec)
prepare_plots(SID_base)

# define default font (size)
theme_font = theme(text = element_text(size=10))  


df_prep = function(df_in){
  s2_all_df = df_in
  s2_all_df$scenario = factor("base")
  s2_all_df = s2_all_df[s2_all_df$HIV_stat %in% c("S1", "S2", "HIV_plus", "pop_HIV"),]
  s2_all_df = drop.levels(s2_all_df)
  s2_all_df$HIV_stat = factor(s2_all_df$HIV_stat, levels=c("S1", "S2", "HIV_plus", "pop_HIV"), labels=c("HIV- no PrEP", "HIV- PrEP", "HIV+", "All"))
  
  s2_inc_df = s2_all_df[s2_all_df$sti_stat %in% "diagnoses_sti",]
  s2_inc_df = s2_all_df[s2_all_df$sti_stat %in% "incidence_sti",]
  # s2_inc_df = s2_inc_df[(s2_inc_df$risk_stat %nin% "all"),]
  s2_inc_df = aggregate(value~floor(year)+HIV_stat+sti_stat+risk_stat+scenario, data=s2_inc_df, FUN=sum, simplify=F)
  colnames(s2_inc_df)[1] = "year"
  s2_inc_df$value = as.numeric(s2_inc_df$value)
  
  s2_prev_df = s2_all_df[s2_all_df$sti_stat %in% "sti_plus",]
  s2_prev_df$value = s2_prev_df$value / s2_all_df[s2_all_df$sti_stat %in% "pop_sti","value"]
  # s2_prev_df = s2_prev_df[s2_prev_df$risk_stat %in% "all",]
  return(list(s2_all_df, s2_inc_df, s2_prev_df))
}

# source("figure_2.R")


# create outputs
source("outputs.R", echo = T)

source("fig_HIV.R", echo = F)
# source("figure_2.R")
# source("plot_facet.R")
# source("plot_gel.R", echo=T)
source("fig_S2.R")
# source("sensitivity.R", echo=T)
# source("heatmap.R", echo=T)

# print the total run time
print(proc.time() - ptm)
